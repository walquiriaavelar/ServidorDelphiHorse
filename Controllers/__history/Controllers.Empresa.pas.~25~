unit Controllers.Empresa;

interface

uses Horse,
     System.SysUtils,
     System.JSON,
     Horse.Jhonson,
     DataModule.Global;

procedure RegistrarRotas;
procedure Listar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Inserir(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Editar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Excluir(Req: THorseRequest; Res: THorseResponse; Next: TProc);

implementation

procedure RegistrarRotas;
begin
    THorse.Get('/Empresa', Listar);
      procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
      var dm: TDmlamapa; arr: TJSONArray;
      begin
        dm := TDmlamapa.Create(nil);
      try
        arr := dm.EmpresaListar;
        try
          Res.Send<TJSONArray>(arr).Status(200);
        finally
          arr.Free;
      end
      finally
       dm.Free;
      end;
      end);

    THorse.Post ('/empresa',            // inserir
       procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var dm: TDmlamapa; body: TJSONObject; ret: TJSONObject;
        codigo: Integer; nome,endereco,cgc,bairro,cidade,estado: string;
    begin
      dm := TDmlamapa.Create(nil);
      try
        body     := Req.Body<TJSONObject>;
        codigo   := body.GetValue<Integer>('codigo', 0);
        nome     := body.GetValue<string>('nome', '');
        endereco := body.GetValue<string>('endereco', '');
        cgc      := body.GetValue<string>('cgc', '');
        bairro   := body.GetValue<string>('bairro', '');
        cidade   := body.GetValue<string>('cidade', '');
        estado   := body.GetValue<string>('estado', '');
        ret := dm.EmpresaInserir(codigo, nome, endereco, cgc, bairro, cidade, estado);
        try
          Res.Send<TJSONObject>(ret).Status(201);
        finally
          ret.Free;
        end;
      finally
        dm.Free;
      end;
    end);

    THorse.Put ('/empresa/:codigo',    // editar
        procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var dm: TDmlamapa; body,ret: TJSONObject;
        codigo: Integer; nome,endereco,cgc,bairro,cidade,estado: string;
    begin
      dm := TDmlamapa.Create(nil);
      try
        codigo   := Req.Params['codigo'].ToInteger;
        body     := Req.Body<TJSONObject>;
        nome     := body.GetValue<string>('nome', '');
        endereco := body.GetValue<string>('endereco', '');
        cgc      := body.GetValue<string>('cgc', '');
        bairro   := body.GetValue<string>('bairro', '');
        cidade   := body.GetValue<string>('cidade', '');
        estado   := body.GetValue<string>('estado', '');
        ret := dm.EmpresaEditar(codigo, nome, endereco, cgc, bairro, cidade, estado);
        try
          Res.Send<TJSONObject>(ret).Status(200);
        finally
          ret.Free;
        end;
      finally
        dm.Free;
      end;
    end);

    THorse.Delete('/empresa/:codigo',    // excluir
         procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var dm: TDmlamapa; ret: TJSONObject; codigo: Integer;
    begin
      dm := TDmlamapa.Create(nil);
      try
        codigo := Req.Params['codigo'].ToInteger;
        ret := dm.EmpresaExcluir(codigo);
        try
          Res.Send<TJSONObject>(ret).Status(200); // ou 204 sem body
        finally
          ret.Free;
        end;
      finally
        dm.Free;
      end;
    end);
end;

end.

procedure Listar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var dmlamapa : Tdmlamapa;
begin
try
dmlamapa := Tdmlamapa.Create(Nil);
//Res.Send(dmlamapa.EmpresaListar).Status(200);
finally
FreeAndNil(dmlamapa);
end;
end;

procedure Inserir(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
    dmlamapa: Tdmlamapa;
    body: TJSONObject;
    nome,endereco,cgc,bairro,cidade,estado: string;
    codigo : integer;
begin
    try
        try
            dmlamapa := Tdmlamapa.Create(nil);
            body := Req.Body<TJSONObject>;
            codigo := body.GetValue<integer>('codigo',0);
            nome := body.GetValue<string>('nome', '');
            endereco := body.GetValue<string>('endereco', '');
            cgc := body.GetValue<string>('cgc', '');
            bairro := body.GetValue<string>('bairro', '');
            cidade := body.GetValue<string>('cidade', '');
            estado := body.GetValue<string>('estado', '');
            Res.Send<TJsonObject>(dmlamapa.EmpresaInserir(codigo,nome, endereco, cgc,
                                                    bairro, cidade, estado)).Status(201);
        except on ex:exception do
            Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
        end;
    finally
        FreeAndNil(dmlamapa);
    end;
end;

procedure Editar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
    dmlamapa: Tdmlamapa;
    body: TJSONObject;
    nome,endereco,cgc,bairro,cidade,estado: string;
    codigo : integer;
begin
    try
        try
            try
                codigo := Req.Params['codigo'].ToInteger;
            except
                codigo := 0;
            end;
            dmlamapa := Tdmlamapa.Create(nil);
            body := Req.Body<TJSONObject>;
            codigo := body.GetValue<integer>('codigo',0);
            nome := body.GetValue<string>('nome', '');
            endereco := body.GetValue<string>('endereco', '');
            cgc := body.GetValue<string>('cgc', '');
            bairro := body.GetValue<string>('bairro', '');
            cidade := body.GetValue<string>('cidade', '');
            estado := body.GetValue<string>('estado', '');
            Res.Send<TJsonObject>(dmlamapa.EmpresaInserir(codigo,nome, endereco, cgc,
                                                    bairro, cidade, estado)).Status(201);
        except on ex:exception do
            Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
        end;
    finally
        FreeAndNil(dmlamapa);
    end;
end;

procedure Excluir(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
    dmlamapa: Tdmlamapa;
    codigo: integer;
begin
    try
        try
            dmlamapa := Tdmlamapa.Create(nil);
            try
                codigo := Req.Params['codigo'].ToInteger;
            except
                codigo := 0;
            end;
            Res.Send<TJsonObject>(dmlamapa.EmpresaExcluir(codigo));
        except on ex:exception do
            Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
        end;
    finally
        FreeAndNil(dmlamapa);
    end;
end;

end.
