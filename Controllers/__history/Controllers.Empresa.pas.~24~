unit Controllers.Empresa;

interface

uses Horse,
     System.SysUtils,
     System.JSON,
     DataModule.Global;

procedure RegistrarRotas;
procedure Listar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Inserir(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Editar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Excluir(Req: THorseRequest; Res: THorseResponse; Next: TProc);

implementation

procedure RegistrarRotas;
begin
    THorse.Get('/Empresa', Listar);
    THorse.Post('/Empresa', Inserir);
    THorse.Put('/Empresa', Editar);
    THorse.Delete('/Empresa', Excluir);
end;

procedure Listar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var dmlamapa : Tdmlamapa;
begin
try
dmlamapa := Tdmlamapa.Create(Nil);
//Res.Send(dmlamapa.EmpresaListar).Status(200);
finally
FreeAndNil(dmlamapa);
end;
end;

procedure Inserir(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
    dmlamapa: Tdmlamapa;
    body: TJSONObject;
    nome,endereco,cgc,bairro,cidade,estado: string;
    codigo : integer;
begin
    try
        try
            dmlamapa := Tdmlamapa.Create(nil);
            body := Req.Body<TJSONObject>;
            codigo := body.GetValue<integer>('codigo',0);
            nome := body.GetValue<string>('nome', '');
            endereco := body.GetValue<string>('endereco', '');
            cgc := body.GetValue<string>('cgc', '');
            bairro := body.GetValue<string>('bairro', '');
            cidade := body.GetValue<string>('cidade', '');
            estado := body.GetValue<string>('estado', '');
            Res.Send<TJsonObject>(dmlamapa.EmpresaInserir(codigo,nome, endereco, cgc,
                                                    bairro, cidade, estado)).Status(201);
        except on ex:exception do
            Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
        end;
    finally
        FreeAndNil(dmlamapa);
    end;
end;

procedure Editar(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
    dmlamapa: Tdmlamapa;
    body: TJSONObject;
    nome,endereco,cgc,bairro,cidade,estado: string;
    codigo : integer;
begin
    try
        try
            try
                codigo := Req.Params['codigo'].ToInteger;
            except
                codigo := 0;
            end;
            dmlamapa := Tdmlamapa.Create(nil);
            body := Req.Body<TJSONObject>;
            codigo := body.GetValue<integer>('codigo',0);
            nome := body.GetValue<string>('nome', '');
            endereco := body.GetValue<string>('endereco', '');
            cgc := body.GetValue<string>('cgc', '');
            bairro := body.GetValue<string>('bairro', '');
            cidade := body.GetValue<string>('cidade', '');
            estado := body.GetValue<string>('estado', '');
            Res.Send<TJsonObject>(dmlamapa.EmpresaInserir(codigo,nome, endereco, cgc,
                                                    bairro, cidade, estado)).Status(201);
        except on ex:exception do
            Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
        end;
    finally
        FreeAndNil(dmlamapa);
    end;
end;

procedure Excluir(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
    dmlamapa: Tdmlamapa;
    codigo: integer;
begin
    try
        try
            dmlamapa := Tdmlamapa.Create(nil);
            try
                codigo := Req.Params['codigo'].ToInteger;
            except
                codigo := 0;
            end;
            Res.Send<TJsonObject>(dmlamapa.EmpresaExcluir(codigo));
        except on ex:exception do
            Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
        end;
    finally
        FreeAndNil(dmlamapa);
    end;
end;

end.
